body file control
{
  namespace => "lynis";
}

bundle agent globals
{
  vars:
    default:linux::
      "version"
        string => ifelse(
                          isvariable( "def.lynis[globals][version]"),
                                      "$(def.lynis[globals][version])",
                          "2.7.5");

      "archive_hash"
        string => ifelse(
                          isvariable( "def.lynis[globals][archive_hash]"),
                          "$(def.lynis[globals][archive_hash])",
                          "3d27ade73a5c1248925ad9c060024940ce5d2029f40aaa901f43314888fe324d");
      # Website SHA256 hash: f23dd57561f273a7e39e4597277571973dadbab6a131a4712340a6d0b36091f5

      "hash_type"    string => "sha256";
      "tar_url"      string => "https://downloads.cisofy.com/lynis/lynis-$(version).tar.gz";

      "max_age" string => "1";

      "install_prefix" string => "/opt/lynis";
      "report_data" string => "/var/log/lynis-report.dat";
}

bundle agent main
{

  methods:

    default:linux::

      "globals";
      "report_freshness";
      "install_tar_gz";
      "audit";
      "report_format";
      "inventory";

}
bundle agent report_freshness
{
  vars:

    default:linux::
      "max_age" string => "$(globals.max_age)";
      "data" string => "$(globals.report_data)";
      "prefix" string => "$(globals.install_prefix)";

  files:
    default:linux::
      "$(data)"
        delete => default:tidy,
        file_select => default:days_old( $(max_age) );

      "$(prefix)/lynis-report.json"
        delete => default:tidy,
        file_select => default:days_old( $(max_age) );
}

bundle agent install_tar_gz
{
  vars:
    default:linux::
      # The github and website packages have differnt shas
      #"url[lynis]"     string => "https://github.com/CISOfy/lynis/archive/$(globals.version).tar.gz";
      "url[lynis]"     string => "$(globals.tar_url)";
      "url[converter]" string => "https://raw.githubusercontent.com/d4t4king/lynis-report-converter/master/lynis-report-converter.pl";
      "lynis_archive"  string => "$(globals.install_prefix)/lynis-$(globals.version).tar.gz";
      "converter"      string => "$(globals.install_prefix)/lynis-report-converter.pl";
      "lynis"          string => "$(globals.install_prefix)/lynis-$(globals.version)/lynis";
      "prefix"         string => "$(globals.install_prefix)";
      "hash_type"      string => "$(globals.hash_type)";
      "archive_hash"   string => "$(globals.archive_hash)";
      "version"        string => "$(globals.version)";

  files:
    default:linux::
      "$(prefix)/."
        comment => "The directory that we are installing to needs to exist or
                    downloads will fail.",
        create => "true";

      # We extract into a version specific directory for install
      "$(prefix)/lynis-$(version)/." create => "true";

  packages:

    (default:centos|default:redhat)::

      "perl-Module-Load-Conditional"
        policy => "present";

      "perl-JSON"
        policy => "present";

    (default:centos|default:redhat).!(default:centos_6|default:redhat_6)::

      "perl-Data-Dumper"
        policy => "present";

    default:centos_6|default:redhat_6::

      "perl-Data-Dumper-Concise"
        policy => "present";

      "perl-Data-Dumper-Names"
        policy => "present";

    default:ubuntu|default:debian::
      "libjson-perl"
        policy => "present";

  commands:

    default:linux::

      # Download the lynis-report-converter to $(converter) if it does not exist

      "/usr/bin/curl"
        unless => fileexists( "$(converter)" ),
        arglist => {
                     "--silent",
                     "$(url[converter])",
                     "--output",
                     "$(converter)",
                     "-k"
                   };

      # Download $(lynis_archive) if it does not match the
      # $(globals.hash_type) digest of $(globals.archive_hash)

      "/usr/bin/curl"
        handle => "fetch_lynis_archive",
        arglist => {
                     "--silent",
                     "$(url[lynis])",
                     #"-L",
                     #"--max-redirs",
                     #"3",
                     "--output",
                     "$(lynis_archive)",
                     #"-k"
                   },
        if => not(fileexists( $(lynis_archive) ));
        # if => not(strcmp(
        #                   file_hash( $(lynis_archive), $(hash_type) ),
        #                   $(archive_hash)
        #                 ));

      # Unpack $(lynis_archive) into $(globals.install_prefix) if
      # $(lynis_archive) matches the $(globals.hash_type) digest of
      # $(globals_archive_hash) AND
      # $(globals.install_prefix)/lynis-$(globals.version) does
      # not exist.

      "/bin/tar"
        arglist => {
                     "-zxf",
                     "$(lynis_archive)",
                     "-C",
                     "$(prefix)/lynis-$(version)",
                     # The tarball from the website contains a directory called lynis, and that's got the content we want.
                     # Note, the tarball from github contains a directory named lynis-Major.Minor.Patch
                     "--strip-components=1"
                   },
        if => and(strcmp(
                          file_hash( $(lynis_archive), $(hash_type) ),
                          $(archive_hash)),
                  not( fileexists( "$(prefix)/lynis-$(version)/lynis") ) );

}

bundle agent audit
# @brief Run lynis from the unpacked tar file if $(globals.report_data) is
# not available.
{
  vars:

   default:linux::

      "report_data" string => "$(globals.report_data)";
      "lynis" string => "$(install_tar_gz.lynis)";
      "lynis_dir" string => dirname( $(lynis) );

  commands:

    default:linux::

     "$(lynis)"
        contain => default:in_dir_shell( "$(lynis_dir)" ),
        arglist => { "audit", "system", "--quiet", "--quick" },
        if => not( fileexists( $(report_data) ) );
}

bundle agent report_format
# @brief Ensure there is an easily consumable version of the lynis report data
{
  vars:

    default:linux::

      "report_data" string => "$(globals.report_data)";
      "converter"   string => "$(install_tar_gz.converter)";
      "prefix"      string => "$(globals.install_prefix)";

  commands:

    default:_stdlib_path_exists_perl::
      "$(paths.perl)"
        arglist => {
                     $(converter),
                     "--input",
                     "/var/log/lynis-report.dat",
                     "--json",
                     "--output",
                     "$(prefix)/lynis-report.json"
                   },
        if => not(fileexists( "$(prefix)/lynis-report.json" ));
}

bundle agent inventory
# @brief Parse the JSON version of the lynis report data and inventory interesting data
{
  vars:

    default:linux::

      "prefix"      string => "$(globals.install_prefix)";

      "d"
        data => readjson("$(prefix)/lynis-report.json", inf ),
        if => fileexists("$(prefix)/lynis-report.json");

      "v"
        string => "$(d[lynis_version])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Version" },
        if => isvariable( "d[lynis_version]" );

      "s" slist => getindices( "d[suggestion[]]" );
      "detail_ids" slist => getindices( "d[details[]]" );

      # Inventory the high level suggestions for CFEngine Enterprise Mission Portal
      "suggestion_id[$(d[suggestion[]][$(s)][id])]"
        string => "$(d[suggestion[]][$(s)][id])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Suggestion"};

      # Inventory the high level suggestions for CFEngine Enterprise Mission Portal
      "suggestion_descriptions[$(d[suggestion[]][$(s)][id])]"
        string => "$(d[suggestion[]][$(s)][id]): $(d[suggestion[]][$(s)][description]) ",
        meta => { "inventory", "attribute_name=CISOfy Lynis High level suggestions"};

      # Inventory the suggestion details for CFEngine Enterprise Mission Portal
      "detail[$(detail_ids)]"
        string => "$(d[details[]][$(detail_ids)][id]) $(d[details[]][$(detail_ids)][description][desc]). $(d[details[]][$(detail_ids)][description][field]) prefers $(d[details[]][$(detail_ids)][description][prefval]) over  $(d[details[]][$(detail_ids)][description][value])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Detailed Suggestion $(d[details[]][$(detail_ids)][id])"};

      # Inventory report scan completion datetime
      "report_datetime_end"
        string => "$(d[report_datetime_end])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Datetime scan completed"},
        if => isvariable( "d[report_datetime_end]" );

      # Inventory Lynis Security Hardening index
      "hardening_index"
        string => "$(d[hardening_index])",
        meta => { "inventory", "attribute_name=CISOfy Lynis Hardening Index"},
        if => isvariable( "d[hardening_index]" );

 reports:

    default:inform_mode.!default:linux::
      "NOTICE: This platform is not currently supported by $(this.namespace):$(this.bundle) in $(this.promise_filename)";

    default:inform_mode.default:linux::
     # Report suggestion details

     "bundle $(this.bundle): $(d[details[]][$(detail_ids)][id]) $(d[details[]][$(detail_ids)][description][desc]). $(d[details[]][$(detail_ids)][description][field]) prefers $(d[details[]][$(detail_ids)][description][prefval]) over  $(d[details[]][$(detail_ids)][description][value])";
}
